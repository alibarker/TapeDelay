/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#ifndef PLUGINPROCESSOR_H_INCLUDED
#define PLUGINPROCESSOR_H_INCLUDED

#include "../JuceLibraryCode/JuceHeader.h"
#include "MultiDistortion.h"
#include "VariableDelayLine.h"
#include "Compressor.h"
#include "LFO.h"

const int numReadHeads = 3;

enum Parameters {
    kInputGain = 0,
    kOutputGain,
    kFeedback,
    kSpeed,
    kWow,
    kFlutter,
    kLowCutoff,
    kHighCutoff,
    kReadPosition1,
    kReadPosition2,
    kReadPosition3,
    kReadGain1,
    kReadGain2,
    kReadGain3,
    kNumParameters
};

//==============================================================================
/**
*/
class TapeDelayAudioProcessor  : public AudioProcessor
{
public:
    //==============================================================================
    TapeDelayAudioProcessor();
    ~TapeDelayAudioProcessor();

    //==============================================================================
    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;

    void processBlock (AudioSampleBuffer&, MidiBuffer&) override;

    //==============================================================================
    AudioProcessorEditor* createEditor() override;
    bool hasEditor() const override;

    //==============================================================================
    const String getName() const override;

    bool acceptsMidi() const override;
    bool producesMidi() const override;
    bool silenceInProducesSilenceOut() const override;
    double getTailLengthSeconds() const override;

    //==============================================================================
    int getNumPrograms() override;
    int getCurrentProgram() override;
    void setCurrentProgram (int index) override;
    const String getProgramName (int index) override;
    void changeProgramName (int index, const String& newName) override;

    //==============================================================================
    void getStateInformation (MemoryBlock& destData) override;
    void setStateInformation (const void* data, int sizeInBytes) override;
    
    // Parameters

    AudioParameterFloat* pInputGain;
    AudioParameterFloat* pOutputGain;
    AudioParameterFloat* pFeedback;
    AudioParameterFloat* pSpeed;
    AudioParameterFloat* pReadPosition1;
    AudioParameterFloat* pReadPosition2;
    AudioParameterFloat* pReadPosition3;

    AudioParameterFloat*  pReadGain1;
    AudioParameterFloat* pReadGain2;
    AudioParameterFloat* pReadGain3;
    AudioParameterFloat* pDistortion;
    AudioParameterFloat* pFlutterAmount;
    AudioParameterFloat* pWowAmount;
    AudioParameterFloat* pLowCutoff;
    AudioParameterFloat* pHighCutoff;

    
private:
    //==============================================================================
    
    
    float previousLowCutoff, previousHighCutoff;
    float* previousReadPos;

    // Sub Components
    ScopedPointer<IIRFilter> tapeLowPass;
    ScopedPointer<IIRFilter> tapeHighPass;
    ScopedPointer<IIRFilter> tapeMidBoost;
    ScopedPointer<MultiDistortion> dist;

    ScopedPointer<LFO> wowLFO;
    ScopedPointer<LFO> flutterLFO;

    ScopedPointer<VariableDelayLine> tape;
    
    
    
    
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (TapeDelayAudioProcessor)
};


#endif  // PLUGINPROCESSOR_H_INCLUDED
